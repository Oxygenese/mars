// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/mars-projects/mars/app/system/internal/api"
	"github.com/mars-projects/mars/app/system/internal/biz"
	"github.com/mars-projects/mars/app/system/internal/router"
	"github.com/mars-projects/mars/app/system/internal/server"
	"github.com/mars-projects/mars/app/system/internal/service"
	"github.com/mars-projects/mars/conf"
	"github.com/mars-projects/mars/lib/wire/data"
	"github.com/mars-projects/mars/lib/wire/middleware/oauth"
	"github.com/mars-projects/mars/lib/wire/register"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, registry *conf.Registry, confData *conf.Data, auth *conf.Auth, logger log.Logger) (*kratos.App, func(), error) {
	client, cleanup, err := data.NewRedisClient(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	tokenStore := data.NewRedisTokenStore(client)
	authentication := oauth.NewAuthentication(tokenStore, logger)
	db := data.NewGormClient(confData)
	bizsOption := biz.NewBizsOption(confData, db, logger)
	apiOption := api.NewApiOptions(bizsOption)
	engine := router.NewGinEngine(authentication, apiOption)
	httpServer := server.NewHTTPServer(confServer, engine, logger)
	systemService := service.NewSystemService(bizsOption)
	grpcServer := server.NewGRPCServer(confServer, systemService, logger)
	nacosRegistry := register.NewNacosRegistrar(registry)
	app := newApp(confServer, logger, httpServer, grpcServer, nacosRegistry)
	return app, func() {
		cleanup()
	}, nil
}
