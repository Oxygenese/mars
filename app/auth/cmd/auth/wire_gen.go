// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/mars-projects/mars/app/auth/internal/api"
	"github.com/mars-projects/mars/app/auth/internal/biz"
	"github.com/mars-projects/mars/app/auth/internal/oauth2"
	"github.com/mars-projects/mars/app/auth/internal/server"
	"github.com/mars-projects/mars/conf"
	"github.com/mars-projects/mars/lib/wire/client"
	"github.com/mars-projects/mars/lib/wire/data"
	"github.com/mars-projects/mars/lib/wire/register"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, registry *conf.Registry, confData *conf.Data, auth *conf.Auth, logger log.Logger, confClient *conf.Client) (*kratos.App, func(), error) {
	captchaApi := api.NewCaptchaHandler(logger)
	redisClient, cleanup, err := data.NewRedisClient(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	tokenStore := data.NewRedisTokenStore(redisClient)
	manager := oauth2.NewManage(tokenStore, auth)
	nacosRegistry := register.NewNacosRegistrar(registry)
	systemClient, err := client.NewSysClient(nacosRegistry, confClient)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	userBiz := biz.NewUserBiz(systemClient, logger)
	serverServer := oauth2.NewServer(manager, userBiz)
	tokenApi := api.NewTokenHandler(serverServer)
	httpServer := server.NewHTTPServer(confServer, logger, captchaApi, tokenApi)
	app := newApp(confServer, logger, httpServer, nacosRegistry)
	return app, func() {
		cleanup()
	}, nil
}
