// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package system

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsUnknownError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserUnknownErrors_UNKNOWN_ERROR.String() && e.Code == 500
}

func ErrorUnknownError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserUnknownErrors_UNKNOWN_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsInternalError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserUnknownErrors_INTERNAL_ERROR.String() && e.Code == 500
}

func ErrorInternalError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserUnknownErrors_INTERNAL_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserNotFoundErrors_USER_NOT_FOUND.String() && e.Code == 404
}

func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, UserNotFoundErrors_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsUserConflict(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserConflictError_USER_CONFLICT.String() && e.Code == 422
}

func ErrorUserConflict(format string, args ...interface{}) *errors.Error {
	return errors.New(422, UserConflictError_USER_CONFLICT.String(), fmt.Sprintf(format, args...))
}

func IsUnauthorized(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserUnAuthorizedError_UNAUTHORIZED.String() && e.Code == 401
}

func ErrorUnauthorized(format string, args ...interface{}) *errors.Error {
	return errors.New(401, UserUnAuthorizedError_UNAUTHORIZED.String(), fmt.Sprintf(format, args...))
}

func IsPasswordIncorrectError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserUnAuthorizedError_PASSWORD_INCORRECT_ERROR.String() && e.Code == 401
}

func ErrorPasswordIncorrectError(format string, args ...interface{}) *errors.Error {
	return errors.New(401, UserUnAuthorizedError_PASSWORD_INCORRECT_ERROR.String(), fmt.Sprintf(format, args...))
}
