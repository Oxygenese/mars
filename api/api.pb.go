// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: api/api.proto

package api

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Operate int32

const (
	//  系统配置操作选项
	Operate_QueryAppConfig      Operate = 0
	Operate_QuerySysConfigSet   Operate = 1
	Operate_QuerySysConfigPage  Operate = 2
	Operate_UpdateSysConfigSet  Operate = 3
	Operate_UpdateSysConfig     Operate = 4
	Operate_QuerySysConfigById  Operate = 5
	Operate_QuerySysConfigByKey Operate = 6
	Operate_CreateSysConfig     Operate = 7
	Operate_DeleteSysConfig     Operate = 8
	// 用户操作
	Operate_UpdateSysUser       Operate = 10
	Operate_CreateSysUser       Operate = 11
	Operate_FindSysUser         Operate = 12
	Operate_QuerySysUserInfo    Operate = 13
	Operate_QuerySysUserPage    Operate = 14
	Operate_QuerySysUserById    Operate = 15
	Operate_ChangeSysUserStatus Operate = 16
	Operate_QuerySysUserProfile Operate = 17
	Operate_UpdateSysUserPwd    Operate = 18
	Operate_ResetSysUserPwd     Operate = 19
	Operate_DeleteSysUser       Operate = 20
	Operate_ExportSysUser       Operate = 31
	//  角色操作选项
	Operate_QuerySysMenuRole       Operate = 21
	Operate_QuerySysRolePage       Operate = 22
	Operate_QuerySysRoleById       Operate = 23
	Operate_CreateSysRole          Operate = 24
	Operate_UpdateSysRole          Operate = 25
	Operate_ChangeSysRoleStatus    Operate = 26
	Operate_DeleteSysRole          Operate = 27
	Operate_UpdateSysRoleDataScope Operate = 28
	// 菜单操作选项
	Operate_QuerySysMenuTreeSelect Operate = 41
	Operate_QuerySysMenuPage       Operate = 42
	Operate_QuerySysMenuById       Operate = 43
	Operate_CreateSysMenu          Operate = 44
	Operate_UpdateSysMenu          Operate = 45
	Operate_DeleteSysMenu          Operate = 46
	//  字典数据操作
	Operate_QueryDictDataSelect Operate = 61
	Operate_QueryDictDataByCode Operate = 62
	Operate_QueryDictDataPage   Operate = 63
	Operate_CreateDictData      Operate = 64
	Operate_UpdateDictData      Operate = 65
	Operate_DeleteDictData      Operate = 66
	//字典类型操作
	Operate_QueryDictTypePage         Operate = 71
	Operate_QueryDictTypeById         Operate = 72
	Operate_CreateDictType            Operate = 73
	Operate_UpdateDictType            Operate = 74
	Operate_DeleteDictType            Operate = 75
	Operate_ExportDictType            Operate = 76
	Operate_QueryDictTypeOptionSelect Operate = 77
	//  部门操作
	Operate_QuerySysDeptTree           Operate = 81
	Operate_QuerySysDeptTreeRoleSelect Operate = 82
	Operate_QuerySysDeptById           Operate = 83
	Operate_QuerySysDeptPage           Operate = 84
	Operate_UpdateSysDept              Operate = 85
	Operate_DeleteSysDept              Operate = 86
	// 岗位操作
	Operate_QuerySysPostPage Operate = 101
	Operate_QuerySysPostById Operate = 102
	Operate_CreateSysPost    Operate = 103
	Operate_UpdateSysPost    Operate = 104
	Operate_DeleteSysPost    Operate = 105
)

// Enum value maps for Operate.
var (
	Operate_name = map[int32]string{
		0:   "QueryAppConfig",
		1:   "QuerySysConfigSet",
		2:   "QuerySysConfigPage",
		3:   "UpdateSysConfigSet",
		4:   "UpdateSysConfig",
		5:   "QuerySysConfigById",
		6:   "QuerySysConfigByKey",
		7:   "CreateSysConfig",
		8:   "DeleteSysConfig",
		10:  "UpdateSysUser",
		11:  "CreateSysUser",
		12:  "FindSysUser",
		13:  "QuerySysUserInfo",
		14:  "QuerySysUserPage",
		15:  "QuerySysUserById",
		16:  "ChangeSysUserStatus",
		17:  "QuerySysUserProfile",
		18:  "UpdateSysUserPwd",
		19:  "ResetSysUserPwd",
		20:  "DeleteSysUser",
		31:  "ExportSysUser",
		21:  "QuerySysMenuRole",
		22:  "QuerySysRolePage",
		23:  "QuerySysRoleById",
		24:  "CreateSysRole",
		25:  "UpdateSysRole",
		26:  "ChangeSysRoleStatus",
		27:  "DeleteSysRole",
		28:  "UpdateSysRoleDataScope",
		41:  "QuerySysMenuTreeSelect",
		42:  "QuerySysMenuPage",
		43:  "QuerySysMenuById",
		44:  "CreateSysMenu",
		45:  "UpdateSysMenu",
		46:  "DeleteSysMenu",
		61:  "QueryDictDataSelect",
		62:  "QueryDictDataByCode",
		63:  "QueryDictDataPage",
		64:  "CreateDictData",
		65:  "UpdateDictData",
		66:  "DeleteDictData",
		71:  "QueryDictTypePage",
		72:  "QueryDictTypeById",
		73:  "CreateDictType",
		74:  "UpdateDictType",
		75:  "DeleteDictType",
		76:  "ExportDictType",
		77:  "QueryDictTypeOptionSelect",
		81:  "QuerySysDeptTree",
		82:  "QuerySysDeptTreeRoleSelect",
		83:  "QuerySysDeptById",
		84:  "QuerySysDeptPage",
		85:  "UpdateSysDept",
		86:  "DeleteSysDept",
		101: "QuerySysPostPage",
		102: "QuerySysPostById",
		103: "CreateSysPost",
		104: "UpdateSysPost",
		105: "DeleteSysPost",
	}
	Operate_value = map[string]int32{
		"QueryAppConfig":             0,
		"QuerySysConfigSet":          1,
		"QuerySysConfigPage":         2,
		"UpdateSysConfigSet":         3,
		"UpdateSysConfig":            4,
		"QuerySysConfigById":         5,
		"QuerySysConfigByKey":        6,
		"CreateSysConfig":            7,
		"DeleteSysConfig":            8,
		"UpdateSysUser":              10,
		"CreateSysUser":              11,
		"FindSysUser":                12,
		"QuerySysUserInfo":           13,
		"QuerySysUserPage":           14,
		"QuerySysUserById":           15,
		"ChangeSysUserStatus":        16,
		"QuerySysUserProfile":        17,
		"UpdateSysUserPwd":           18,
		"ResetSysUserPwd":            19,
		"DeleteSysUser":              20,
		"ExportSysUser":              31,
		"QuerySysMenuRole":           21,
		"QuerySysRolePage":           22,
		"QuerySysRoleById":           23,
		"CreateSysRole":              24,
		"UpdateSysRole":              25,
		"ChangeSysRoleStatus":        26,
		"DeleteSysRole":              27,
		"UpdateSysRoleDataScope":     28,
		"QuerySysMenuTreeSelect":     41,
		"QuerySysMenuPage":           42,
		"QuerySysMenuById":           43,
		"CreateSysMenu":              44,
		"UpdateSysMenu":              45,
		"DeleteSysMenu":              46,
		"QueryDictDataSelect":        61,
		"QueryDictDataByCode":        62,
		"QueryDictDataPage":          63,
		"CreateDictData":             64,
		"UpdateDictData":             65,
		"DeleteDictData":             66,
		"QueryDictTypePage":          71,
		"QueryDictTypeById":          72,
		"CreateDictType":             73,
		"UpdateDictType":             74,
		"DeleteDictType":             75,
		"ExportDictType":             76,
		"QueryDictTypeOptionSelect":  77,
		"QuerySysDeptTree":           81,
		"QuerySysDeptTreeRoleSelect": 82,
		"QuerySysDeptById":           83,
		"QuerySysDeptPage":           84,
		"UpdateSysDept":              85,
		"DeleteSysDept":              86,
		"QuerySysPostPage":           101,
		"QuerySysPostById":           102,
		"CreateSysPost":              103,
		"UpdateSysPost":              104,
		"DeleteSysPost":              105,
	}
)

func (x Operate) Enum() *Operate {
	p := new(Operate)
	*p = x
	return p
}

func (x Operate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operate) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[0].Descriptor()
}

func (Operate) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[0]
}

func (x Operate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operate.Descriptor instead.
func (Operate) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{0}
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string  `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Operate   Operate `protobuf:"varint,2,opt,name=operate,proto3,enum=api.Operate" json:"operate,omitempty"`
	Data      []byte  `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *Request) GetOperate() Operate {
	if x != nil {
		return x.Operate
	}
	return Operate_QueryAppConfig
}

func (x *Request) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Reply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Code      uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Data      []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Message   string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Reply) Reset() {
	*x = Reply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reply) ProtoMessage() {}

func (x *Reply) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reply.ProtoReflect.Descriptor instead.
func (*Reply) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{1}
}

func (x *Reply) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *Reply) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Reply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Reply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_api_api_proto protoreflect.FileDescriptor

var file_api_api_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x61, 0x70, 0x69, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x64, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x07, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x68, 0x0a, 0x05, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2a, 0x90, 0x0a, 0x0a, 0x07, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x67,
	0x65, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x10, 0x04,
	0x12, 0x16, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x79, 0x49, 0x64, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x79, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x10,
	0x06, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x79, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x55, 0x73, 0x65, 0x72, 0x10, 0x0a, 0x12, 0x11,
	0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x55, 0x73, 0x65, 0x72, 0x10,
	0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x79, 0x73, 0x55, 0x73, 0x65, 0x72,
	0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x73, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x79, 0x73, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x10, 0x0e, 0x12, 0x14,
	0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x73, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79,
	0x49, 0x64, 0x10, 0x0f, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x79,
	0x73, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x10, 0x12, 0x17, 0x0a,
	0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x73, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x10, 0x11, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x79, 0x73, 0x55, 0x73, 0x65, 0x72, 0x50, 0x77, 0x64, 0x10, 0x12, 0x12, 0x13, 0x0a, 0x0f,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x79, 0x73, 0x55, 0x73, 0x65, 0x72, 0x50, 0x77, 0x64, 0x10,
	0x13, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x73, 0x55, 0x73,
	0x65, 0x72, 0x10, 0x14, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x79,
	0x73, 0x55, 0x73, 0x65, 0x72, 0x10, 0x1f, 0x12, 0x14, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x79, 0x73, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x6f, 0x6c, 0x65, 0x10, 0x15, 0x12, 0x14, 0x0a,
	0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x61, 0x67,
	0x65, 0x10, 0x16, 0x12, 0x14, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x73, 0x52,
	0x6f, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x64, 0x10, 0x17, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x10, 0x18, 0x12, 0x11, 0x0a, 0x0d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x10, 0x19, 0x12,
	0x17, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x79, 0x73, 0x52, 0x6f, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x1a, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x79, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x10, 0x1b, 0x12, 0x1a, 0x0a, 0x16, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x10, 0x1c, 0x12, 0x1a, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x79, 0x73, 0x4d, 0x65, 0x6e, 0x75, 0x54, 0x72, 0x65, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x10, 0x29, 0x12, 0x14, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x73, 0x4d,
	0x65, 0x6e, 0x75, 0x50, 0x61, 0x67, 0x65, 0x10, 0x2a, 0x12, 0x14, 0x0a, 0x10, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x79, 0x73, 0x4d, 0x65, 0x6e, 0x75, 0x42, 0x79, 0x49, 0x64, 0x10, 0x2b, 0x12,
	0x11, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x4d, 0x65, 0x6e, 0x75,
	0x10, 0x2c, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x4d,
	0x65, 0x6e, 0x75, 0x10, 0x2d, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x79, 0x73, 0x4d, 0x65, 0x6e, 0x75, 0x10, 0x2e, 0x12, 0x17, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x44, 0x69, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x10,
	0x3d, 0x12, 0x17, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x63, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x10, 0x3e, 0x12, 0x15, 0x0a, 0x11, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x44, 0x69, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x67, 0x65, 0x10,
	0x3f, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x10, 0x40, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x69, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x10, 0x41, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x10, 0x42, 0x12, 0x15, 0x0a,
	0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x50, 0x61,
	0x67, 0x65, 0x10, 0x47, 0x12, 0x15, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x49, 0x64, 0x10, 0x48, 0x12, 0x12, 0x0a, 0x0e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x49, 0x12,
	0x12, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x4a, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x4b, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x69, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x4c, 0x12, 0x1d, 0x0a, 0x19, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x10, 0x4d, 0x12, 0x14, 0x0a, 0x10, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x79, 0x73, 0x44, 0x65, 0x70, 0x74, 0x54, 0x72, 0x65, 0x65, 0x10, 0x51,
	0x12, 0x1e, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x73, 0x44, 0x65, 0x70, 0x74,
	0x54, 0x72, 0x65, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x10, 0x52,
	0x12, 0x14, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x73, 0x44, 0x65, 0x70, 0x74,
	0x42, 0x79, 0x49, 0x64, 0x10, 0x53, 0x12, 0x14, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x79, 0x73, 0x44, 0x65, 0x70, 0x74, 0x50, 0x61, 0x67, 0x65, 0x10, 0x54, 0x12, 0x11, 0x0a, 0x0d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x44, 0x65, 0x70, 0x74, 0x10, 0x55, 0x12,
	0x11, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x73, 0x44, 0x65, 0x70, 0x74,
	0x10, 0x56, 0x12, 0x14, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x73, 0x50, 0x6f,
	0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x10, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x79, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x42, 0x79, 0x49, 0x64, 0x10, 0x66, 0x12, 0x11,
	0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x10,
	0x67, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x50, 0x6f,
	0x73, 0x74, 0x10, 0x68, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79,
	0x73, 0x50, 0x6f, 0x73, 0x74, 0x10, 0x69, 0x32, 0x47, 0x0a, 0x04, 0x43, 0x65, 0x6c, 0x6c, 0x12,
	0x3f, 0x0a, 0x11, 0x4f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x12, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x10,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x22, 0x05, 0x2f, 0x63, 0x65, 0x6c, 0x6c, 0x3a, 0x01, 0x2a,
	0x32, 0x49, 0x0a, 0x05, 0x43, 0x68, 0x69, 0x65, 0x66, 0x12, 0x40, 0x0a, 0x11, 0x4f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x0c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b,
	0x22, 0x06, 0x2f, 0x63, 0x68, 0x69, 0x65, 0x66, 0x3a, 0x01, 0x2a, 0x32, 0x48, 0x0a, 0x06, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x3e, 0x0a, 0x11, 0x4f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x0c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x0f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x09, 0x22, 0x04, 0x2f, 0x73,
	0x79, 0x73, 0x3a, 0x01, 0x2a, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x72, 0x73, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x6d, 0x61, 0x72, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x3b, 0x61, 0x70, 0x69, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_api_proto_rawDescOnce sync.Once
	file_api_api_proto_rawDescData = file_api_api_proto_rawDesc
)

func file_api_api_proto_rawDescGZIP() []byte {
	file_api_api_proto_rawDescOnce.Do(func() {
		file_api_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_api_proto_rawDescData)
	})
	return file_api_api_proto_rawDescData
}

var file_api_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_api_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_api_api_proto_goTypes = []interface{}{
	(Operate)(0),    // 0: api.Operate
	(*Request)(nil), // 1: api.Request
	(*Reply)(nil),   // 2: api.Reply
}
var file_api_api_proto_depIdxs = []int32{
	0, // 0: api.Request.operate:type_name -> api.Operate
	1, // 1: api.Cell.OnMessageReceived:input_type -> api.Request
	1, // 2: api.Chief.OnMessageReceived:input_type -> api.Request
	1, // 3: api.System.OnMessageReceived:input_type -> api.Request
	2, // 4: api.Cell.OnMessageReceived:output_type -> api.Reply
	2, // 5: api.Chief.OnMessageReceived:output_type -> api.Reply
	2, // 6: api.System.OnMessageReceived:output_type -> api.Reply
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_api_api_proto_init() }
func file_api_api_proto_init() {
	if File_api_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_api_api_proto_goTypes,
		DependencyIndexes: file_api_api_proto_depIdxs,
		EnumInfos:         file_api_api_proto_enumTypes,
		MessageInfos:      file_api_api_proto_msgTypes,
	}.Build()
	File_api_api_proto = out.File
	file_api_api_proto_rawDesc = nil
	file_api_api_proto_goTypes = nil
	file_api_api_proto_depIdxs = nil
}
