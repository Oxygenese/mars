// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.4

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type ChiefHTTPServer interface {
	OnMessageReceived(context.Context, *Request) (*Reply, error)
}

func RegisterChiefHTTPServer(s *http.Server, srv ChiefHTTPServer) {
	r := s.Route("/")
	r.POST("/chief", _Chief_OnMessageReceived0_HTTP_Handler(srv))
}

func _Chief_OnMessageReceived0_HTTP_Handler(srv ChiefHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Request
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.Chief/OnMessageReceived")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OnMessageReceived(ctx, req.(*Request))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Reply)
		return ctx.Result(200, reply)
	}
}

type ChiefHTTPClient interface {
	OnMessageReceived(ctx context.Context, req *Request, opts ...http.CallOption) (rsp *Reply, err error)
}

type ChiefHTTPClientImpl struct {
	cc *http.Client
}

func NewChiefHTTPClient(client *http.Client) ChiefHTTPClient {
	return &ChiefHTTPClientImpl{client}
}

func (c *ChiefHTTPClientImpl) OnMessageReceived(ctx context.Context, in *Request, opts ...http.CallOption) (*Reply, error) {
	var out Reply
	pattern := "/chief"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.Chief/OnMessageReceived"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

type SystemHTTPServer interface {
	OnMessageReceived(context.Context, *Request) (*Reply, error)
}

func RegisterSystemHTTPServer(s *http.Server, srv SystemHTTPServer) {
	r := s.Route("/")
	r.POST("/sys", _System_OnMessageReceived1_HTTP_Handler(srv))
}

func _System_OnMessageReceived1_HTTP_Handler(srv SystemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Request
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.System/OnMessageReceived")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OnMessageReceived(ctx, req.(*Request))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Reply)
		return ctx.Result(200, reply)
	}
}

type SystemHTTPClient interface {
	OnMessageReceived(ctx context.Context, req *Request, opts ...http.CallOption) (rsp *Reply, err error)
}

type SystemHTTPClientImpl struct {
	cc *http.Client
}

func NewSystemHTTPClient(client *http.Client) SystemHTTPClient {
	return &SystemHTTPClientImpl{client}
}

func (c *SystemHTTPClientImpl) OnMessageReceived(ctx context.Context, in *Request, opts ...http.CallOption) (*Reply, error) {
	var out Reply
	pattern := "/sys"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.System/OnMessageReceived"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
