// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.4

package chief

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type ImageServiceHTTPServer interface {
	OnMessageReceived(context.Context, *Message) (*Reply, error)
}

func RegisterImageServiceHTTPServer(s *http.Server, srv ImageServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/chief/image", _ImageService_OnMessageReceived0_HTTP_Handler(srv))
}

func _ImageService_OnMessageReceived0_HTTP_Handler(srv ImageServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Message
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/chief.ImageService/OnMessageReceived")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OnMessageReceived(ctx, req.(*Message))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Reply)
		return ctx.Result(200, reply)
	}
}

type ImageServiceHTTPClient interface {
	OnMessageReceived(ctx context.Context, req *Message, opts ...http.CallOption) (rsp *Reply, err error)
}

type ImageServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewImageServiceHTTPClient(client *http.Client) ImageServiceHTTPClient {
	return &ImageServiceHTTPClientImpl{client}
}

func (c *ImageServiceHTTPClientImpl) OnMessageReceived(ctx context.Context, in *Message, opts ...http.CallOption) (*Reply, error) {
	var out Reply
	pattern := "/chief/image"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/chief.ImageService/OnMessageReceived"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

type InstanceServiceHTTPServer interface {
	OnMessageReceived(context.Context, *Message) (*Reply, error)
}

func RegisterInstanceServiceHTTPServer(s *http.Server, srv InstanceServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/chief/instance", _InstanceService_OnMessageReceived1_HTTP_Handler(srv))
}

func _InstanceService_OnMessageReceived1_HTTP_Handler(srv InstanceServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Message
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/chief.InstanceService/OnMessageReceived")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OnMessageReceived(ctx, req.(*Message))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Reply)
		return ctx.Result(200, reply)
	}
}

type InstanceServiceHTTPClient interface {
	OnMessageReceived(ctx context.Context, req *Message, opts ...http.CallOption) (rsp *Reply, err error)
}

type InstanceServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewInstanceServiceHTTPClient(client *http.Client) InstanceServiceHTTPClient {
	return &InstanceServiceHTTPClientImpl{client}
}

func (c *InstanceServiceHTTPClientImpl) OnMessageReceived(ctx context.Context, in *Message, opts ...http.CallOption) (*Reply, error) {
	var out Reply
	pattern := "/chief/instance"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/chief.InstanceService/OnMessageReceived"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
