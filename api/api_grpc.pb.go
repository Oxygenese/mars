// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CellClient is the client API for Cell service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CellClient interface {
	OnMessageReceived(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
}

type cellClient struct {
	cc grpc.ClientConnInterface
}

func NewCellClient(cc grpc.ClientConnInterface) CellClient {
	return &cellClient{cc}
}

func (c *cellClient) OnMessageReceived(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/api.Cell/OnMessageReceived", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CellServer is the server API for Cell service.
// All implementations must embed UnimplementedCellServer
// for forward compatibility
type CellServer interface {
	OnMessageReceived(context.Context, *Request) (*Reply, error)
	mustEmbedUnimplementedCellServer()
}

// UnimplementedCellServer must be embedded to have forward compatible implementations.
type UnimplementedCellServer struct {
}

func (UnimplementedCellServer) OnMessageReceived(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnMessageReceived not implemented")
}
func (UnimplementedCellServer) mustEmbedUnimplementedCellServer() {}

// UnsafeCellServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CellServer will
// result in compilation errors.
type UnsafeCellServer interface {
	mustEmbedUnimplementedCellServer()
}

func RegisterCellServer(s grpc.ServiceRegistrar, srv CellServer) {
	s.RegisterService(&Cell_ServiceDesc, srv)
}

func _Cell_OnMessageReceived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellServer).OnMessageReceived(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Cell/OnMessageReceived",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellServer).OnMessageReceived(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Cell_ServiceDesc is the grpc.ServiceDesc for Cell service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cell_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Cell",
	HandlerType: (*CellServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnMessageReceived",
			Handler:    _Cell_OnMessageReceived_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// ChiefClient is the client API for Chief service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChiefClient interface {
	OnMessageReceived(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
}

type chiefClient struct {
	cc grpc.ClientConnInterface
}

func NewChiefClient(cc grpc.ClientConnInterface) ChiefClient {
	return &chiefClient{cc}
}

func (c *chiefClient) OnMessageReceived(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/api.Chief/OnMessageReceived", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChiefServer is the server API for Chief service.
// All implementations must embed UnimplementedChiefServer
// for forward compatibility
type ChiefServer interface {
	OnMessageReceived(context.Context, *Request) (*Reply, error)
	mustEmbedUnimplementedChiefServer()
}

// UnimplementedChiefServer must be embedded to have forward compatible implementations.
type UnimplementedChiefServer struct {
}

func (UnimplementedChiefServer) OnMessageReceived(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnMessageReceived not implemented")
}
func (UnimplementedChiefServer) mustEmbedUnimplementedChiefServer() {}

// UnsafeChiefServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChiefServer will
// result in compilation errors.
type UnsafeChiefServer interface {
	mustEmbedUnimplementedChiefServer()
}

func RegisterChiefServer(s grpc.ServiceRegistrar, srv ChiefServer) {
	s.RegisterService(&Chief_ServiceDesc, srv)
}

func _Chief_OnMessageReceived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChiefServer).OnMessageReceived(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Chief/OnMessageReceived",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChiefServer).OnMessageReceived(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Chief_ServiceDesc is the grpc.ServiceDesc for Chief service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chief_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Chief",
	HandlerType: (*ChiefServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnMessageReceived",
			Handler:    _Chief_OnMessageReceived_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// SystemClient is the client API for System service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemClient interface {
	OnMessageReceived(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
}

type systemClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemClient(cc grpc.ClientConnInterface) SystemClient {
	return &systemClient{cc}
}

func (c *systemClient) OnMessageReceived(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/api.System/OnMessageReceived", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemServer is the server API for System service.
// All implementations must embed UnimplementedSystemServer
// for forward compatibility
type SystemServer interface {
	OnMessageReceived(context.Context, *Request) (*Reply, error)
	mustEmbedUnimplementedSystemServer()
}

// UnimplementedSystemServer must be embedded to have forward compatible implementations.
type UnimplementedSystemServer struct {
}

func (UnimplementedSystemServer) OnMessageReceived(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnMessageReceived not implemented")
}
func (UnimplementedSystemServer) mustEmbedUnimplementedSystemServer() {}

// UnsafeSystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemServer will
// result in compilation errors.
type UnsafeSystemServer interface {
	mustEmbedUnimplementedSystemServer()
}

func RegisterSystemServer(s grpc.ServiceRegistrar, srv SystemServer) {
	s.RegisterService(&System_ServiceDesc, srv)
}

func _System_OnMessageReceived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).OnMessageReceived(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.System/OnMessageReceived",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).OnMessageReceived(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// System_ServiceDesc is the grpc.ServiceDesc for System service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var System_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.System",
	HandlerType: (*SystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnMessageReceived",
			Handler:    _System_OnMessageReceived_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
