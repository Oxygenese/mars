// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/compute/compute.proto

package compute

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ComputeClient is the client API for Compute service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComputeClient interface {
	CreateDomain(ctx context.Context, in *CreateInstanceReq, opts ...grpc.CallOption) (*CreateInstanceReply, error)
	DeleteDomain(ctx context.Context, in *DeleteInstanceReq, opts ...grpc.CallOption) (*DeleteInstanceReply, error)
	CreateStoragePool(ctx context.Context, in *CreateStoragePoolReq, opts ...grpc.CallOption) (*CreateStoragePoolReply, error)
	DeleteStoragePool(ctx context.Context, in *DeleteStoragePoolReq, opts ...grpc.CallOption) (*DeleteStoragePoolReply, error)
}

type computeClient struct {
	cc grpc.ClientConnInterface
}

func NewComputeClient(cc grpc.ClientConnInterface) ComputeClient {
	return &computeClient{cc}
}

func (c *computeClient) CreateDomain(ctx context.Context, in *CreateInstanceReq, opts ...grpc.CallOption) (*CreateInstanceReply, error) {
	out := new(CreateInstanceReply)
	err := c.cc.Invoke(ctx, "/v1.Compute/CreateDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computeClient) DeleteDomain(ctx context.Context, in *DeleteInstanceReq, opts ...grpc.CallOption) (*DeleteInstanceReply, error) {
	out := new(DeleteInstanceReply)
	err := c.cc.Invoke(ctx, "/v1.Compute/DeleteDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computeClient) CreateStoragePool(ctx context.Context, in *CreateStoragePoolReq, opts ...grpc.CallOption) (*CreateStoragePoolReply, error) {
	out := new(CreateStoragePoolReply)
	err := c.cc.Invoke(ctx, "/v1.Compute/CreateStoragePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computeClient) DeleteStoragePool(ctx context.Context, in *DeleteStoragePoolReq, opts ...grpc.CallOption) (*DeleteStoragePoolReply, error) {
	out := new(DeleteStoragePoolReply)
	err := c.cc.Invoke(ctx, "/v1.Compute/DeleteStoragePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComputeServer is the server API for Compute service.
// All implementations must embed UnimplementedComputeServer
// for forward compatibility
type ComputeServer interface {
	CreateDomain(context.Context, *CreateInstanceReq) (*CreateInstanceReply, error)
	DeleteDomain(context.Context, *DeleteInstanceReq) (*DeleteInstanceReply, error)
	CreateStoragePool(context.Context, *CreateStoragePoolReq) (*CreateStoragePoolReply, error)
	DeleteStoragePool(context.Context, *DeleteStoragePoolReq) (*DeleteStoragePoolReply, error)
	mustEmbedUnimplementedComputeServer()
}

// UnimplementedComputeServer must be embedded to have forward compatible implementations.
type UnimplementedComputeServer struct {
}

func (UnimplementedComputeServer) CreateDomain(context.Context, *CreateInstanceReq) (*CreateInstanceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDomain not implemented")
}
func (UnimplementedComputeServer) DeleteDomain(context.Context, *DeleteInstanceReq) (*DeleteInstanceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDomain not implemented")
}
func (UnimplementedComputeServer) CreateStoragePool(context.Context, *CreateStoragePoolReq) (*CreateStoragePoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStoragePool not implemented")
}
func (UnimplementedComputeServer) DeleteStoragePool(context.Context, *DeleteStoragePoolReq) (*DeleteStoragePoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStoragePool not implemented")
}
func (UnimplementedComputeServer) mustEmbedUnimplementedComputeServer() {}

// UnsafeComputeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComputeServer will
// result in compilation errors.
type UnsafeComputeServer interface {
	mustEmbedUnimplementedComputeServer()
}

func RegisterComputeServer(s grpc.ServiceRegistrar, srv ComputeServer) {
	s.RegisterService(&Compute_ServiceDesc, srv)
}

func _Compute_CreateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInstanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeServer).CreateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Compute/CreateDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeServer).CreateDomain(ctx, req.(*CreateInstanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compute_DeleteDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInstanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeServer).DeleteDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Compute/DeleteDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeServer).DeleteDomain(ctx, req.(*DeleteInstanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compute_CreateStoragePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoragePoolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeServer).CreateStoragePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Compute/CreateStoragePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeServer).CreateStoragePool(ctx, req.(*CreateStoragePoolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compute_DeleteStoragePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStoragePoolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeServer).DeleteStoragePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Compute/DeleteStoragePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeServer).DeleteStoragePool(ctx, req.(*DeleteStoragePoolReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Compute_ServiceDesc is the grpc.ServiceDesc for Compute service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Compute_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Compute",
	HandlerType: (*ComputeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDomain",
			Handler:    _Compute_CreateDomain_Handler,
		},
		{
			MethodName: "DeleteDomain",
			Handler:    _Compute_DeleteDomain_Handler,
		},
		{
			MethodName: "CreateStoragePool",
			Handler:    _Compute_CreateStoragePool_Handler,
		},
		{
			MethodName: "DeleteStoragePool",
			Handler:    _Compute_DeleteStoragePool_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/compute/compute.proto",
}
